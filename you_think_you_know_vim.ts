// hjkl

const item = "Here is a variable";
const item2 = "Here is a variable";




























// wbe

const item3 = "Here is a variable";
const item4 = "Here is a variable";























// ft and FT, ;,

async function foo(bar: (baz: number) => Promise<void>): Promise<void> {
    return bar(42);
}
























// yy and dd with p and P

async function foo(bar: (baz: number) => Promise<void>): Promise<void> {
    return bar(42);
}







































// x and s, S
const foobar = true;

if (foobra) {
    // TODO: Delete me
}

























// %

type TreeNode = {
    left?: TreeNode;
    right?: TreeNode;
};
function dfs(node: TreeNode | null | undefined, cb: (node: TreeNode) => void) {
    if (!node) {
        return;
    }
    cb(node);
    dfs(node.left, cb)
    dfs(node.right, cb);
}
[
    "foo",
    "bar",
    "baz",
]




















// ~
type Bar = ["bar"];
function returnBar(): "bar" {
    const bar: Bar = [

        "Bar"
    ];
    return bar[0];
}

























































// $, _, 0, I, A
let frodo = "dont wear the ring";
if (frodo) {

    frodo = "is now";
    frodo = "invisible";
    frodo = "gets";
    = "stabbed";
    frodo = ":(
}





























// Ok you are now ready!!!









































// To learn some more VIM!!!!!


























// Specifically, Vim Movements


























// Skip These Lines

//Dont Touch Me
//Dont Touch Me
//Dont Touch Me
//Dont Touch Me
//Dont Touch Me














// Half page down





















// Ok you are now ready!!!








































// To learn some more VIM!!!!!


























// Specifically, Ins and Outs



























function giveMeTheDI() {

    function goAheadDeleteMe() {
    }
}






























function giveMeTheCI() {

    function goAheadDeleteMe() {
    }
}






























function giveMeTheYI() {

    function pasteMeBelowExclamationMark() {
        return "yaya";
    }
}
































function giveMeTheVI() {

    function replaceMeWithYI() {
    }
}

































function giveMeTheEqualI() {

function fixMePlease() {
return "yaya";
}
}




























// All the same but with a instead of i
// da, ca, ya, va, =a
function theOutsides(foo, bar) {

    const a = {stuff: "here"};
    const b = ["or", "here"];
    const c = {foo: "foo", bar: "bar"};
    const d = {paste: "me", from: "yank"};
    if (true)
{
console.log("I LOVE THE As");
}
}










































// Now you are ready!!!
























// For just one more quick thing.


























// g

// Highlight long sentense first
// type foo:

// Really long sentense Really long sentense Really long sentense Really long sentense Really long sentense Really long sentense Really long sentense Really long sentense Really long sentense Really long sentense Really long sentense Really long sentense Really long sentense Really long sentense Really long sentense Really long sentense Really long sentense Really long sentense Really long sentense Really long sentense Really long sentense Really long sentense Really long sentense Really long sentense Really long sentense Really long sentense Really long sentense Really long sentense Really long sentense Really long sentense..............................  Really long sentense.




































// Show them the windows!!!








































// Lastly






































// this






































// is




































// a



































// joke
































// please


































// dont




































// hate
































// me






























// Fin.

























